// Find: #define\s([\w]+)\s*(\w+)(.*)$
// Replace: const $1: usize = $2; $3
// ======================================================================
/**
 * \ingroup defines
 * \defgroup keycodes Keyboard key identifiers
 */
// ======================================================================
//@{
pub const OAPI_KEY_ESCAPE: usize = 0x01; // < Escape key
pub const OAPI_KEY_1: usize = 0x02; // < '1' key on main keyboard
pub const OAPI_KEY_2: usize = 0x03; // < '2' key on main keyboard
pub const OAPI_KEY_3: usize = 0x04; // < '3' key on main keyboard
pub const OAPI_KEY_4: usize = 0x05; // < '4' key on main keyboard
pub const OAPI_KEY_5: usize = 0x06; // < '5' key on main keyboard
pub const OAPI_KEY_6: usize = 0x07; // < '6' key on main keyboard
pub const OAPI_KEY_7: usize = 0x08; // < '7' key on main keyboard
pub const OAPI_KEY_8: usize = 0x09; // < '8' key on main keyboard
pub const OAPI_KEY_9: usize = 0x0A; // < '9' key on main keyboard
pub const OAPI_KEY_0: usize = 0x0B; // < '0' key on main keyboard
pub const OAPI_KEY_MINUS: usize = 0x0C; // < '-' key on main keyboard
pub const OAPI_KEY_EQUALS: usize = 0x0D; // < '=' key on main keyboard
pub const OAPI_KEY_BACK: usize = 0x0E; // < backspace key
pub const OAPI_KEY_TAB: usize = 0x0F; // < tab key
pub const OAPI_KEY_Q: usize = 0x10; // < 'Q' key
pub const OAPI_KEY_W: usize = 0x11; // < 'W' key
pub const OAPI_KEY_E: usize = 0x12; // < 'E' key
pub const OAPI_KEY_R: usize = 0x13; // < 'R' key
pub const OAPI_KEY_T: usize = 0x14; // < 'T' key
pub const OAPI_KEY_Y: usize = 0x15; // < 'Y' key
pub const OAPI_KEY_U: usize = 0x16; // < 'U' key
pub const OAPI_KEY_I: usize = 0x17; // < 'I' key
pub const OAPI_KEY_O: usize = 0x18; // < 'O' key
pub const OAPI_KEY_P: usize = 0x19; // < 'P' key
pub const OAPI_KEY_LBRACKET: usize = 0x1A; // < '[' (left bracket) key
pub const OAPI_KEY_RBRACKET: usize = 0x1B; // < ']' (right bracket) key
pub const OAPI_KEY_RETURN: usize = 0x1C; // < 'Enter' key on main keyboard
pub const OAPI_KEY_LCONTROL: usize = 0x1D; // < Left 'Ctrl' key
pub const OAPI_KEY_A: usize = 0x1E; // < 'A' key
pub const OAPI_KEY_S: usize = 0x1F; // < 'S' key
pub const OAPI_KEY_D: usize = 0x20; // < 'D' key
pub const OAPI_KEY_F: usize = 0x21; // < 'F' key
pub const OAPI_KEY_G: usize = 0x22; // < 'G' key
pub const OAPI_KEY_H: usize = 0x23; // < 'H' key
pub const OAPI_KEY_J: usize = 0x24; // < 'J' key
pub const OAPI_KEY_K: usize = 0x25; // < 'K' key
pub const OAPI_KEY_L: usize = 0x26; // < 'L' key
pub const OAPI_KEY_SEMICOLON: usize = 0x27; // < ';' (semicolon) key
pub const OAPI_KEY_APOSTROPHE: usize = 0x28; // < ' (apostrophe) key
pub const OAPI_KEY_GRAVE: usize = 0x29; // < accent grave
pub const OAPI_KEY_LSHIFT: usize = 0x2A; // < Left 'Shift' key
pub const OAPI_KEY_BACKSLASH: usize = 0x2B; // < '\' (Backslash) key
pub const OAPI_KEY_Z: usize = 0x2C; // < 'Z' key
pub const OAPI_KEY_X: usize = 0x2D; // < 'X' key
pub const OAPI_KEY_C: usize = 0x2E; // < 'C' key
pub const OAPI_KEY_V: usize = 0x2F; // < 'V' key
pub const OAPI_KEY_B: usize = 0x30; // < 'B' key
pub const OAPI_KEY_N: usize = 0x31; // < 'N' key
pub const OAPI_KEY_M: usize = 0x32; // < 'M' key
pub const OAPI_KEY_COMMA: usize = 0x33; // < ',' (comma) key
pub const OAPI_KEY_PERIOD: usize = 0x34; // < '.' key on main keyboard
pub const OAPI_KEY_SLASH: usize = 0x35; // < '/' key on main keyboard
pub const OAPI_KEY_RSHIFT: usize = 0x36; // < Right 'Shift' key
pub const OAPI_KEY_MULTIPLY: usize = 0x37; // < * on numeric keypad
pub const OAPI_KEY_LALT: usize = 0x38; // < left Alt
pub const OAPI_KEY_SPACE: usize = 0x39; // < 'Space' key
pub const OAPI_KEY_CAPITAL: usize = 0x3A; // < caps lock key
pub const OAPI_KEY_F1: usize = 0x3B; // < F1 function key
pub const OAPI_KEY_F2: usize = 0x3C; // < F2 function key
pub const OAPI_KEY_F3: usize = 0x3D; // < F3 function key
pub const OAPI_KEY_F4: usize = 0x3E; // < F4 function key
pub const OAPI_KEY_F5: usize = 0x3F; // < F5 function key
pub const OAPI_KEY_F6: usize = 0x40; // < F6 function key
pub const OAPI_KEY_F7: usize = 0x41; // < F7 function key
pub const OAPI_KEY_F8: usize = 0x42; // < F8 function key
pub const OAPI_KEY_F9: usize = 0x43; // < F9 function key
pub const OAPI_KEY_F10: usize = 0x44; // < F10 function key
pub const OAPI_KEY_NUMLOCK: usize = 0x45; // < 'Num Lock' key
pub const OAPI_KEY_SCROLL: usize = 0x46; // < Scroll lock
pub const OAPI_KEY_NUMPAD7: usize = 0x47; // < '7' key on numeric keypad
pub const OAPI_KEY_NUMPAD8: usize = 0x48; // < '8' key on numeric keypad
pub const OAPI_KEY_NUMPAD9: usize = 0x49; // < '9' key on numeric keypad
pub const OAPI_KEY_SUBTRACT: usize = 0x4A; // < '-' key on numeric keypad
pub const OAPI_KEY_NUMPAD4: usize = 0x4B; // < '4' key on numeric keypad
pub const OAPI_KEY_NUMPAD5: usize = 0x4C; // < '5' key on numeric keypad
pub const OAPI_KEY_NUMPAD6: usize = 0x4D; // < '6' key on numeric keypad
pub const OAPI_KEY_ADD: usize = 0x4E; // < '+' key on numeric keypad
pub const OAPI_KEY_NUMPAD1: usize = 0x4F; // < '1' key on numeric keypad
pub const OAPI_KEY_NUMPAD2: usize = 0x50; // < '2' key on numeric keypad
pub const OAPI_KEY_NUMPAD3: usize = 0x51; // < '3' key on numeric keypad
pub const OAPI_KEY_NUMPAD0: usize = 0x52; // < '0' key on numeric keypad
pub const OAPI_KEY_DECIMAL: usize = 0x53; // < '.' key on numeric keypad
pub const OAPI_KEY_OEM_102: usize = 0x56; // < | \< \> on UK/German keyboards
pub const OAPI_KEY_F11: usize = 0x57; // < F11 function key
pub const OAPI_KEY_F12: usize = 0x58; // < F12 function key
pub const OAPI_KEY_NUMPADENTER: usize = 0x9C; // < Enter on numeric keypad
pub const OAPI_KEY_RCONTROL: usize = 0x9D; // < right Control key
pub const OAPI_KEY_DIVIDE: usize = 0xB5; // < '/' key on numeric keypad
pub const OAPI_KEY_SYSRQ: usize = 0xB7; // < SysRq/PrtScn key
pub const OAPI_KEY_RALT: usize = 0xB8; // < right Alt
pub const OAPI_KEY_PAUSE: usize = 0xC5; // < Break/Pause key
pub const OAPI_KEY_HOME: usize = 0xC7; // < Home on cursor keypad
pub const OAPI_KEY_UP: usize = 0xC8; // < up-arrow on cursor keypad
pub const OAPI_KEY_PRIOR: usize = 0xC9; // < PgUp on cursor keypad
pub const OAPI_KEY_LEFT: usize = 0xCB; // < left-arrow on cursor keypad
pub const OAPI_KEY_RIGHT: usize = 0xCD; // < right-arrow on cursor keypad
pub const OAPI_KEY_END: usize = 0xCF; // < End on cursor keypad
pub const OAPI_KEY_DOWN: usize = 0xD0; // < down-arrow on cursor keypad
pub const OAPI_KEY_NEXT: usize = 0xD1; // < PgDn on cursor keypad
pub const OAPI_KEY_INSERT: usize = 0xD2; // < Insert on cursor keypad
pub const OAPI_KEY_DELETE: usize = 0xD3; // < Delete on cursor keypad
                                       //@}

// const KEYDOW: usize = N; (buf,key) (buf[key] & 0x80)
// const RESETKE: usize = Y; (buf,key) (buf[key] = 0)

// const KEYMOD_LSHIF: usize = T; (buf)   (KEYDOWN(buf,OAPI_KEY_LSHIFT))
// const KEYMOD_RSHIF: usize = T; (buf)   (KEYDOWN(buf,OAPI_KEY_RSHIFT))
// const KEYMOD_SHIF: usize = T; (buf)    (KEYMOD_LSHIFT(buf) || KEYMOD_RSHIFT(buf))
// const KEYMOD_LCONTRO: usize = L; (buf) (KEYDOWN(buf,OAPI_KEY_LCONTROL))
// const KEYMOD_RCONTRO: usize = L; (buf) (KEYDOWN(buf,OAPI_KEY_RCONTROL))
// const KEYMOD_CONTRO: usize = L; (buf)  (KEYMOD_LCONTROL(buf) || KEYMOD_RCONTROL(buf))
// const KEYMOD_LAL: usize = T; (buf)     (KEYDOWN(buf,OAPI_KEY_LALT))
// const KEYMOD_RAL: usize = T; (buf)     (KEYDOWN(buf,OAPI_KEY_RALT))
// const KEYMOD_AL: usize = T; (buf)      (KEYMOD_LALT(buf) || KEYMOD_RALT(buf))

// ======================================================================
/// \ingroup defines
/// \defgroup logical_keys Logical key ids
// ======================================================================
//@{
pub const OAPI_LKEY_COCKPITROTATELEFT: usize = 0; // < rotate camera left in cockpit view
pub const OAPI_LKEY_COCKPITROTATERIGHT: usize = 1; // < rotate camera right in cockpit view
pub const OAPI_LKEY_COCKPITROTATEUP: usize = 2; // < rotate camera up in cockpit view
pub const OAPI_LKEY_COCKPITROTATEDOWN: usize = 3; // < rotate camera down in cockpit view
pub const OAPI_LKEY_COCKPITDONTLEAN: usize = 4; // < return to default cockpit camera position
pub const OAPI_LKEY_COCKPITLEANFORWARD: usize = 5; // < move cockpit camera forward
pub const OAPI_LKEY_COCKPITLEANLEFT: usize = 6; // < move cockpit camera left
pub const OAPI_LKEY_COCKPITLEANRIGHT: usize = 7; // < move cockpit camera right
pub const OAPI_LKEY_COCKPITRESETCAM: usize = 8; // < rotate and shift cockpit camera back to default
pub const OAPI_LKEY_PANELSHIFTLEFT: usize = 9; // < shift 2D instrument panel left
pub const OAPI_LKEY_PANELSHIFTRIGHT: usize = 10; // < shift 2D instrument panel right
pub const OAPI_LKEY_PANELSHIFTUP: usize = 11; // < shift 2D instrument panel up
pub const OAPI_LKEY_PANELSHIFTDOWN: usize = 12; // < shift 2D instrument panel down
pub const OAPI_LKEY_PANELSWITCHLEFT: usize = 13; // < switch to left neighbour panel
pub const OAPI_LKEY_PANELSWITCHRIGHT: usize = 14; // < switch to right neighbour panel
pub const OAPI_LKEY_PANELSWITCHUP: usize = 15; // < switch to upper neighbour panel
pub const OAPI_LKEY_PANELSWITCHDOWN: usize = 16; // < switch to lower neighbour panel
pub const OAPI_LKEY_TRACKROTATELEFT: usize = 17; // < turn track view camera left
pub const OAPI_LKEY_TRACKROTATERIGHT: usize = 18; // < turn track view camera right
pub const OAPI_LKEY_TRACKROTATEUP: usize = 19; // < turn track view camera up
pub const OAPI_LKEY_TRACKROTATEDOWN: usize = 20; // < turn track view camera down
pub const OAPI_LKEY_TRACKADVANCE: usize = 21; // < advance track view camera towards target
pub const OAPI_LKEY_TRACKRETREAT: usize = 22; // < retreat track view camera from target
pub const OAPI_LKEY_GROUNDTILTLEFT: usize = 23; // < tilt camera left in ground view
pub const OAPI_LKEY_GROUNDTILTRIGHT: usize = 24; // < tilt camera right in ground view
pub const OAPI_LKEY_GROUNDTILTUP: usize = 25; // < tilt camera up in ground view
pub const OAPI_LKEY_GROUNDTILTDOWN: usize = 26; // < tilt camera down in ground view
pub const OAPI_LKEY_INCMAINTHRUST: usize = 27; // < increment thrust of main thrusters
pub const OAPI_LKEY_DECMAINTHRUST: usize = 28; // < decrement thrust of main thrusters
pub const OAPI_LKEY_KILLMAINRETRO: usize = 29; // < kill main and retro thrusters
pub const OAPI_LKEY_FULLMAINTHRUST: usize = 30; // < temporary full main thrust
pub const OAPI_LKEY_FULLRETROTHRUST: usize = 31; // < temporary full retro thrust
pub const OAPI_LKEY_INCHOVERTHRUST: usize = 32; // < increment thrust of hover thrusters
pub const OAPI_LKEY_DECHOVERTHRUST: usize = 33; // < decrement thrust of hover thrusters
pub const OAPI_LKEY_RCSENABLE: usize = 34; // < enable/disable RCS (reaction control system)
pub const OAPI_LKEY_RCSMODE: usize = 35; // < toggle linear/rotational RCS mode
pub const OAPI_LKEY_RCSPITCHUP: usize = 36; // < rotational RCS: pitch up
pub const OAPI_LKEY_RCSPITCHDOWN: usize = 37; // < rotational RCS: pitch down
pub const OAPI_LKEY_RCSYAWLEFT: usize = 38; // < rotational RCS: yaw left
pub const OAPI_LKEY_RCSYAWRIGHT: usize = 39; // < rotational RCS: yaw right
pub const OAPI_LKEY_RCSBANKLEFT: usize = 40; // < rotational RCS: bank left
pub const OAPI_LKEY_RCSBANKRIGHT: usize = 41; // < rotational RCS: bank right
pub const OAPI_LKEY_RCSUP: usize = 42; // < linear RCS: accelerate up (+y)
pub const OAPI_LKEY_RCSDOWN: usize = 43; // < linear RCS: accelerate down (-y)
pub const OAPI_LKEY_RCSLEFT: usize = 44; // < linear RCS: accelerate left (-x)
pub const OAPI_LKEY_RCSRIGHT: usize = 45; // < linear RCS: accelerate right (+x)
pub const OAPI_LKEY_RCSFORWARD: usize = 46; // < linear RCS: accelerate forward (+z)
pub const OAPI_LKEY_RCSBACK: usize = 47; // < linear RCS: accelerate backward (-z)
pub const OAPI_LKEY_LPRCSPITCHUP: usize = 48; // < rotational RCS: pitch up 10%
pub const OAPI_LKEY_LPRCSPITCHDOWN: usize = 49; // < rotational RCS: pitch down 10%
pub const OAPI_LKEY_LPRCSYAWLEFT: usize = 50; // < rotational RCS: yaw left 10%
pub const OAPI_LKEY_LPRCSYAWRIGHT: usize = 51; // < rotational RCS: yaw right 10%
pub const OAPI_LKEY_LPRCSBANKLEFT: usize = 52; // < rotational RCS: bank left 10%
pub const OAPI_LKEY_LPRCSBANKRIGHT: usize = 53; // < rotational RCS: bank right 10%
pub const OAPI_LKEY_LPRCSUP: usize = 54; // < linear RCS: accelerate up 10% (+y)
pub const OAPI_LKEY_LPRCSDOWN: usize = 55; // < linear RCS: accelerate down 10% (-y)
pub const OAPI_LKEY_LPRCSLEFT: usize = 56; // < linear RCS: accelerate left 10% (-x)
pub const OAPI_LKEY_LPRCSRIGHT: usize = 57; // < linear RCS: accelerate right 10% (+x)
pub const OAPI_LKEY_LPRCSFORWARD: usize = 58; // < linear RCS: accelerate forward 10% (+z)
pub const OAPI_LKEY_LPRCSBACK: usize = 59; // < linear RCS: accelerate backward 10% (-z)
pub const OAPI_LKEY_NMHOLDALTITUDE: usize = 60; // < toggle navmode: hold altitude
pub const OAPI_LKEY_NMHLEVEL: usize = 61; // < toggle navmode: level with horizon
pub const OAPI_LKEY_NMPROGRADE: usize = 62; // < toggle navmode: prograde
pub const OAPI_LKEY_NMRETROGRADE: usize = 63; // < toggle navmode: retrograde
pub const OAPI_LKEY_NMNORMAL: usize = 64; // < toggle navmode: normal to orbital plane
pub const OAPI_LKEY_NMANTINORMAL: usize = 65; // < toggle navmode: antinormal to orbital plane
pub const OAPI_LKEY_NMKILLROT: usize = 66; // < toggle navmode: kill rotation
pub const OAPI_LKEY_UNDOCK: usize = 67; // < undock from docked vessel
pub const OAPI_LKEY_INCELEVATORTRIM: usize = 68; // < increment elevator trim setting
pub const OAPI_LKEY_DECELEVATORTRIM: usize = 69; // < decrement elevator trim setting
pub const OAPI_LKEY_WHEELBRAKELEFT: usize = 70; // < apply wheelbrake left
pub const OAPI_LKEY_WHEELBRAKERIGHT: usize = 71; // < apply wheelbrake right
pub const OAPI_LKEY_HUD: usize = 72; // < toggle HUD on/off
pub const OAPI_LKEY_HUDMODE: usize = 73; // < switch through HUD modes
pub const OAPI_LKEY_HUDREFERENCE: usize = 74; // < query reference object for HUD display
pub const OAPI_LKEY_HUDTARGET: usize = 75; // < query target object for HUD display
pub const OAPI_LKEY_HUDCOLOUR: usize = 76; // < switch through HUD colours
pub const OAPI_LKEY_INCSIMSPEED: usize = 77; // < increase simulation speed x10
pub const OAPI_LKEY_DECSIMSPEED: usize = 78; // < decrease simulation speed x0.1
pub const OAPI_LKEY_INCFOV: usize = 79; // < increment field of view
pub const OAPI_LKEY_DECFOV: usize = 80; // < decrement field of view
pub const OAPI_LKEY_STEPINCFOV: usize = 81; // < increment field of view by 10 deg
pub const OAPI_LKEY_STEPDECFOV: usize = 82; // < decrement field of view by 10 deg
pub const OAPI_LKEY_MAINMENU: usize = 83; // < open main menu
pub const OAPI_LKEY_DLGHELP: usize = 84; // < open help dialog
pub const OAPI_LKEY_DLGCAMERA: usize = 85; // < open camera dialog
pub const OAPI_LKEY_DLGSIMSPEED: usize = 86; // < open simulation speed dialog
pub const OAPI_LKEY_DLGCUSTOMCMD: usize = 87; // < open custom command dialog
pub const OAPI_LKEY_DLGVISHELPER: usize = 88; // < open visual helper dialog
pub const OAPI_LKEY_DLGRECORDER: usize = 89; // < open flight recorder dialog
pub const OAPI_LKEY_DLGINFO: usize = 90; // < open object info dialog
pub const OAPI_LKEY_DLGMAP: usize = 91; // < open map dialog
pub const OAPI_LKEY_TOGGLECAMINTERNAL: usize = 92; // < switch between cockpit and external camera
pub const OAPI_LKEY_TOGGLETRACKMODE: usize = 93; // < switch between track camera modes
pub const OAPI_LKEY_TOGGLEPANELMODE: usize = 94; // < switch between cockpit modes
pub const OAPI_LKEY_TOGGLEPLANETARIUM: usize = 95; // < toggle celestial marker display on/off
pub const OAPI_LKEY_TOGGLERECPLAY: usize = 96; // < toggle flight recorder/playback on/off
pub const OAPI_LKEY_PAUSE: usize = 97; // < toggle simulation pause on/off
pub const OAPI_LKEY_QUICKSAVE: usize = 98; // < quick-save current simulation state
pub const OAPI_LKEY_QUIT: usize = 99; // < quit simulation session
pub const OAPI_LKEY_DLGSELECTVESSEL: usize = 100; // < open vessel selection dialog
pub const OAPI_LKEY_SELECTPREVVESSEL: usize = 101; // < switch focus to previous vessel
pub const OAPI_LKEY_DLGCAPTURE: usize = 102; // < open screen capture dialog
pub const LKEY_COUNT: usize = 103; // < number of logical key definitions
